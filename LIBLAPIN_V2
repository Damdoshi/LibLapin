
 This file is not intended to announce a V2 of the Bunny Library.
 This file is an idea box to be used in case of a big enough refactoring
 or restart of the bunny library.

 Programming practice: ---------------------------------------------------------

 - Use a test framework to retrieve code coverage and achieve something close
   to 100%.

 General architecture: ---------------------------------------------------------

 - Enforce C++ where it is efficient: ressource management, configuration.
 - Make the bunny library modular from the beginning: this DOES NOT MEAN
   that the bunny library will be *splitted* but that it could be compiled
   with or without specific components, defined at *compilation*. For example:
   having a bunny library with configuration only. Without MIDI support, etc.
   (This note may disappeir, as one of the objective of the 1.13 is to achieve
   that)

 - Keep most of the API compatible. The shift from LibLapin 1 to 2 must
   be almost unpainful. The work to do is mainly inside mechanics. Eventually,
   macros may be present to keep the compatibility when the API changed, as
   usual.

 About ressource management: ---------------------------------------------------

 - The main *real* problem  is that creating a new object based on an already
   loaded ressource... in case of failure for any reason will delete the
   object in a stupid fashion, provoking a mass failure of all objects
   previously successfully allocated that was sharing the ressource.
 - Another problem is that destroying ressources inside the ressource
   manager while knowing the final type make dependencies mandatory to
   compile the ressource manager, which is annoying.
 - When it cames to operations allocating memories, the best behaviour should
   be to be ACID (like database)

 About structures: -------------------------------------------------------------

 - They should be compatible with stack allocation, that means that no element
   should be hidden at the end of the structure and undeclared at all inside
   the public API. If there is element hidden at the end, _private[] should appeir
   to cover them and allow stack declaration.

 About function generating elements: -------------------------------------------

 - Quite often, prototypes are too poor to serve the full potential
   of the bunny library. Most functions generating elements have a
   new that create from nothing an element and a load from a configuration
   file.
     Here are the different ways that should be available to
     create an element:
     => With a function call with parameters defining properties
        (width, height, etc.)
     => With a function call with a single parameter to a structure defining
     properties (t_bunny_sprite_configuration*)
     => With a file path that match the context (const char *picture_file)
     => With a file that match the context loaded in memory (void* to a picture file)
     => With a configuration file path (const char *configuration_file)
     => With a loaded as text configuration file (const char *code)
     => With a parsed configuration file (aka, t_bunny_configuration)

     Also, about the element itself:
     => It should be possible to get it from the return value.
     => It should be possible to sent an already allocated element (stack
        (but as there is no destructor, it will not be recommanded, heap)
        by pointer to get it filled by the function.

  Full example:
    t_bunny_picture_configuration cnf = {
      .width = 800, .height = 600
    };
    void *loaded_png_file
      = bunny_load_file("milky_way.png");
    const char *str
      = "Picture='milky_way.png'\nWidth=800\nHeight=600";
    t_bunny_configuration *lcnf
      = bunny_load_configuration("picture.xml", XML_FILE_FORMAT);
    t_bunny_picture *local_pic
      = bunny_malloc(sizof(*local_pic));
    t_bunny_picture *pic
      = NULL;

    // Return NULL on error
    pic = bunny_new_picture(unsigned int width, unsigned int height);
    pic = bunny_new_picture(&cnf);
    pic = bunny_new_picture(loaded_png_file);
    pic = bunny_new_picture("milky_way.png");
    pic = bunny_new_picture("picture.xml");
    pic = bunny_new_picture(str, INI_FILE_FORMAT);
    pic = bunny_new_picture(lcnf);

    // Return false on error. local_pic is untouched on error.
    bunny_new_picture(local_pic, unsigned int width, unsigned int height);
    bunny_new_picture(local_pic, &cnf);
    bunny_new_picture(local_pic, loaded_png_file);
    bunny_new_picture(local_pic, "milky_way.png");
    bunny_new_picture(local_pic, "picture.xml");
    bunny_new_picture(local_pic, str, INI_FILE_FORMAT);
    bunny_new_picture(local_pic, lcnf);

    Of course, suffixes or keywords will be mandatory, as there is no
    parametric polymorphism in C. _Generic will be used when it is
    possible but it may not be always there and a way to use those
    functions *must* be available without _Generic as C++ does not
    support it and the bunny library must be available in C++ as it
    is now. Maybe:

    bunny_new_picture
    bunny_new_picture_by_configuration
    bunny_load_picture_from_ressource_file
    bunny_load_picture_from_memory
    bunny_load_picture_from_configuration_file
    bunny_load_picture_from_configuration_code
    bunny_load_picture_from_configuration

    bunny_fill_new_picture(width, height);
    // Etc.

 About sound types: ------------------------------------------------------------

 - Natively, the sound module should provide the following, in a unified and
   more easy to handle fashion:

     The sound manager - which may be enterely transparent but can be fully
     set/unset by functions in the same way as context.
     A music object, which play one or more tracks in loop, synchronously
     An effect object, which is a collection of sound effect with the same semantic
     A voice object, which is the current bunny_sound_sprite

 About scripting: --------------------------------------------------------------

  - A tighter link between configuration and ressources so any object can be
    handled in script. The GUI box context with the use of bindf show the way:
    it is possible to have several objects without proper value but linked to
    ressources values so script impact is immediatly done.

 About logs: -------------------------------------------------------------------

  - Separate public function from private one and manage to user log only inside
    public function. Example:

    As written in "function generating elements", we have this kind
    of organization:
      bunny_read_data: public function to read a bunny configuration
      bunny_parse_data: public function to read a memory chunk
      bunny_load_data: public function to load a file

    bunny_load_data load a file into memory and give the memory chunk to
    parse data.
    bunny_parse_data parse the text (or anything else) inside the memory
    chunk and generate a bunny configuration he give to bunny_read_data
    bunny_read_data do what we want it to do with the sent configuration.

    => If all functions logs accordingly to their prototypes, the information
    useful to the user is lost, because load_data will log the file, but
    parse data will log the memory chunk address and read data the configuration
    address, but both those last one were *generated* and will be freed
    and so are useless to the user.

    The idea is to bring all function in double:
      bunny_private_read_data
      bunny_private_parse_data
      bunny_private_load_data

      bunny_private_*_data do the same things as bunny_*_data but never
      logs. It only write inside errno and stuff what bunny_*_data will
      need to log accordingly to the function that was at the begining
      called by the user.

      It means that bunny_private_load_data will be called by bunny_load_data.
      bunny_private_load_data will *not* call bunny_parse_data but instead
      bunny_private_parse_data, which will *not* call bunny_read_data but
      bunny_private_read_data. So the only function that will be able
      to log anything will be the top level function used by the user.

      In this way, only pertinent informations will be logged. It will be
      possible to log accordingly to what we need:
      - In a ultra complete fashion with debug log that are written by
        *all* function even private one, and that may be useful to solve
	bugs that happened on the customer computer. (Those would
	certainly be recorded in a rotative file)
      - In a limited fashion with only information from the eventual
        bad usage of a function, thanks to the separation between public
	and private functions. In a human readable fashion.

 About misc: -------------------------------------------------------------------

  - Functions that need a delay/elapsed time can use an inside mechanism that
    is time locked with the main loop to allow avoiding to give the delay
    parameter (ex: t_bunny_sprite)

  - Free functions may be macros to set to NULL sent pointers.
