
Dabsic:

Champs énumérés crée a la volée dans les prototypes des fonctions. Il accessible a l'adresse de la fonction.nom_fonction.nom_paramètre par exemple et sont un tableau.
Il n'est possible d'utiliser ces champs énumérés implicitement que lorsqu'on est dans la liste d'appel des paramètres. Exemple:

DoOperation(int a, int b, [ADD,SUB] ope) = [Function
  if ope == ADD then
    return a + b
  return a - b
]

Main = [Function
  [].DoOperation.ope var = [].DoOperation.ope.SUB 'Ca, c'est moche, mais peut on l'éviter ? Peut etre avec un With implicite basée sur le type de la variable
  DoOperation(3, 2, var)

  DoOperation(5, 6, ADD) 'Le scope du paramètre est implicite.
]

=> Operateur d'assignation alternatif autorisant le changement de type de l'opérande de gauche.
=> L'opérateur = classique serait fortement typé tandis que l'autre non. Un mot clef indiquant la solidité du type des champs était prévu dans le livre de référence, a voir comment cela peut s'articuler.
=======
Reference sur noeud. Normalement c'est geré mais... je ne sais plus ^^'

Possibilité d'écrire un truc comme [0..10] et qui représente un ensemble.
Du coup on pourrait faire
If (Stuff in [0..10])
Foreach ([0..10] as Var)

Bien sur, on pourrait avoir des variables [var..0] [var1..var2] etc.

Pourquoi pas carrement un ensemble non linéaire: [0..10, 20..30] par exemple.
Ce type pourrait être bati sur une classe (quand Dabsic supportera ca correctement)
écrite en Dabsic.


La surcharge d'opérateur est une fonctionnalié attendue, mais et si il était
possible d'établir une nouvelle syntaxe de construction? Par exemple, l'ensemble ci-dessus
pourrait etre:
[class Range
  BuildSyntax = "\[#Value..#Value[, \[#Value..#Value\]]*\]
  Constructor(Array values) = [Function

  ]
]
Cette expression régulière dans le langage permettrait de définir de nouveaux aspects linguistiques a chaud.
Evidemment, ca semble aussi particulièrement risqué d'un point de vue sécu.
>>>>>>> Stashed changes
