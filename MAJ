=========================================================================================
------------------------------------- Version 1.11 --------------------------------------
=========================================================================================

 - Epuration du dossier racine du projet

 - ---------------------------------
 - A propos du système d'allocation:

 - - LAPIN_ALLOCATOR_DEACTIVATED peut maintenant être utilisé dans la LibLapin
     de manière à forcer celle-ci a utiliser l'allocateur système. Les fonctions
     d'allocations restent présente mais ne sont plus appellées par la lib elle-même.
 - - Les macros BUNNY_ALLOCATOR_OVERLOAD et BUNNY_ALLOCATOR_DEACTIVATED sont ajoutés
     et sont des synonymes de LAPIN_ALLOCATOR_OVERLOAD et LAPIN_ALLOCATOR_DEACTIVATED.

 - ---------------------------------
 - Ajout du module "Bunny Security":

 - - bunny_cipher/uncipher_file/data permet de chiffrer/dechiffrer des fichiers/buffers.
 - - Trois algorithmes sont actuellement supportés: XOR, le chiffre de césar et un mélangeage
     des données
 - - Le programme ecrit avec la liblapin contient une clef par defaut dont la valeur
     ne provoque aucun chiffrement. Cette clef peut etre obtenue a l'aide de la
     fonction bunny_default_key et ecrite (de l'exterieur du programme) a l'aide de la
     fonction bunny_fill_default_key.

 - ----------------------------
 - Ajout du module "Bunny text":
 - - Module de texte ajoutant un type "clipable" gerant de la même facon les polices
     de caractere au format ttf que les polices de caractere au format png.
 - - Le clipable texte dispose des proprietes suivantes:
 - - - Le texte, evidemment. Avec gestion des sauts de ligne et tabulation.
 - - - La possibilite de renvoyer a la ligne un texte qui déborde a gauche ou a droite
       ou de le couper (hcrop)
 - - - La possibilite de couper le texte qui deborde en haut ou en bas ou de le laisser
       deborder. (vcrop)
 - - - La justification du texte horizontalement (le texte commence a la toute gauche
       et termine a la toute droite, sauf saut de ligne)
 - - - La justification du texte verticalement (le texte commence tout en haut et termine,
       tout en bas, si il comporte au moins deux lignes, bien sur)
 - - - L'alignement a gauche, au milieu ou a droite (Si hjustify est vrai, c'est ignoré)
 - - - l'alignement en haut, au milieu ou a droite (Si vjustify est vrai, c'est ignoré)
 - - - Le contour coloré du texte (0 si vous n'en voulez pas)
 - - - Le t_bunny_position offset qui permet de deplacer la "camera" sur la boite de
       texte. Cela ressemble au clipable, mais fonctionne sur le dessin du texte et
       non celui de l'image.

 - - Les fonctions suivantes ont évolué afin de prendre en charge le nouveau clipable:
 - - - bunny_draw permet maintenant de dessiner un texte d'un clipable dans le clipable
     lui meme.
 - - - bunny_blit permet d'afficher le texte a l'endroit desire
 - - - Les fonctions bunny_set_*, bunny_fill et bunny_clear fonctionnent dessus comme
       sur un t_bunny_picture.

 - - La fonction bunny_load_font permet de générer l'un ou l'autre des formats en
     fonction du fichier passé en paramètre. Si il s'agit d'un fichier *.ttf, il l'ouvrira
     comme une font, sinon il l'ouvrira comme une image.

 - -------------------------------------
 - Ajout du module "Bunny plugin":

 - Charge une bibliothèque dynamique respectant un certain format et fournissant
   une interface d'appel typé dynamiquement devant servir plus tard a bunny_configuration.

 - -------------------------------------
 - Ajout du module "Bunny configuration":

 - Mise en arrière de l'API Bunny INI du module "Bunny Configuration" en vue de la
   construction d'une API Bunny Configuration plus complete:
 - - Chargement et sauvegarde de fichiers INI
 - - Chargement et sauvegarde de fichiers DABSIC
 - - [Chargement et sauvegarde de fichier XML et LUA/JSON]
 - - Manipulations unifiées, quelque soit le format chargé, avec de nombreuses fonctions
     avec conversions explicites possibles

 - - Ajout des fonctions bunny_write_ini et bunny_read_ini permettant de charger et
     sauvegarder du INI depuis des chaines de caractère (Utile pour combiner ce module
     au module bunny_security)

 - Fonctions bunny_configurationçget_nbr_child, bunny_configuration_get_nbr_case et
   bunny_ini_field_count.

 - ---------------------------------
 - Ajout du mini module "Bunny Hash"
 - Une fonction de hash générant des hashs de 64 bits, deux algorithmes simples
   disponibles avec, ainsi qu'une mini interface d'extension, comme d'habitude.

 - ------------------------------------------------------
 - Ajout des fonctions bunny_load_file et bunny_save_file
 - Ajout de la fonction bunny_thread_push permettant d'ajouter une unique tache
   dans le thread pool.

 - ------------------
 - Ajout de conteneur: pile, file, liste, tableau dynamique, map, champ de bit
 - Ajout de conteneur: "pool": ensemble d'elements pre alloué rapide a "l'allocation"
   et a la liberation.

 - ----------------------
 - Ajout des fonctions de collision suivants, dans le module collide.h:
 - - bunny_circle_collision_dot & bunny_circle_collision
 - - bunny_rectangular_collision_dot & bunny_rectangular_collision
 - - Mais surtout:
 - - - bunny_triangle_collision_dot
 - - - bunny_quad_collision_dot
 - - - + Ajout de "geosquare", programme de démo dans example/misc permettant
 - -     de tester la collision entre un clic de souris et un quadrilatère quelconque.

 - ----------------------
 - Première version de bunny_evaluate gérant +-*/%<><=>= == != () et ?: ainsi que
   des litteraux numeriques, mais pas encore de variables (ou de paramètre)
 - Compatibilité avec SFML 2.4.1 (+Retrait de la SFML inclue dans la bibliothèque),
   il reste un problème lié aux shaders qui sera reglé dans la 1.12.
 - Resolution d'un bug dans bunny_set_geometry lors d'une utilisation de texture:
   Des points étaient la seule forme affichée, quelque soit la forme demandée.
 - ANTIALISING ajouté dans t_bunny_window_style
 - Reorganisation des fichiers en-tête privé.

 - Ajout des évenements co/deco reseau et message reseau.
 - Ajout d'un module unix avec bunny_popen et bunny_pclose.
 - Si le temps restant à l'execution de la boucle principale est inferieur a 5% du delai,
   l'affichage n'a pas lieu. Si l'affichage n'a pas lieu 20 fois d'affilé, il est tout
   de même fait une fois.

 - Dossier pour test unitaire. Actuellement, les conteneurs sont les seuls testé,
   a l'exception de leur fonction threades et de certains foreach.

=========================================================================================
------------------------------------- Version 1.10 --------------------------------------
=========================================================================================

 - Eclatement par module des fichiers en tete basic.h, advanced.h et extra.h,
   desormais, les en tetes seront ranges par fonctionnalites.
 - Documentation de l'integralite de la bibliotheque
 - bunny_get_screen_size passe dans compat.h et donc obsolete
 - Refonte du Makefile
 - Template de projet simple

=========================================================================================
------------------------------------- Version 1.9.1: ------------------------------------
=========================================================================================

 - Fonction bunny_get_screen_resolution
 - Fonction bunny_strnlen (Pour Windows)
 - Ajout d'un projet codeblock pour compiler la LibLapin
 - Compatibilité dela 1.9 assuré sous Windows.
 - L'interface de threading ne thread pas sous Windows...

=========================================================================================
------------------------------------- Version 1.9: --------------------------------------
=========================================================================================

 - Les fichiers en-tete extra.h et extra_type.h s'ajoutent a la LibLapin.
   Avec, un ensemble de mécanismes dont les dependances sont dans dep et include/dep.

 - Dans extra.h sont disponibles un nouvel ensemble de fonctionnalités pour projets
   particulierement avancés:

 - - Un ordonnanceur reseau TCP basé autour d'un systeme de polling.

 - - Une threadpool accessible via une fonction bunny_thread_foreach.

 - - Un driver pour une carte d'interface PC-Electronique de chez Velleman, la VM110N.

 - Reorganisation des exemples de code. Des demos des fonctionnalités supplementaires ajoutes:
 - - Demo d'utilisation des shaders.
 - - Demo du deplacement et redimensionnement de fenetre
 - - Demo du reseau
 - - Demo du thread pool
 - - Demo du driver hardware

 - Verification de l'appel a malloc initial

 - Fonctions bunny_move_window et bunny_resize_window ajoutes.

 - Ajout de la fonction bunny_get_screen_size.

=========================================================================================
------------------------------------- Version 1.8: --------------------------------------
=========================================================================================

 - La globale DEFAULT_SCOPE n'existait pas... Maintenant elle existe est equivaut à la globale
   default_scope.

 - Ajout d'un color mask, actif uniquement sur t_bunny_picture, a évidemment recoder sur les
   pixelarray. Ce masque de couleur permet d'alterer les composantes de l'image lors du blit.

 - Ajout d'un mode TechnoCentre permettant de générer des faux pixelarray pour le serveur de
   correction.

 - Lorsqu'un morceau de memoire altere est decouvert, il est maintenant affiche sur stderr.

 - Prototype de bunny_save_pixelarray incorrect (const...), faisant que la véritable
   fonction était décorée et donc innaccessible en C.

 - Fix de la gestion d'erreur INI.

 - Fonction bunny_set_circle ajouté.

 - On renomme les fonctions bunny_ini_first et bunny_ini_next respectivement
   bunny_ini_first_scope et bunny_ini_next_scope. Des macros dans compat.h sont presence
   pour qu'aucune adaptation du code existant ne soit neccessaire.

 - Ajout de fonctions de navigations a l'interieur d'un scope dans un fichier INI:
   - bunny_ini_first_field, bunny_ini_field_name, bunny_ini_next_field
   - bunny_field_get_value, bunny_field_set_value
   - LAST_FIELD et t_bunny_ini_field

 - Ajout d'une fonction de recherche et d'obtention directe par nom: bunny_ini_get_scope.

 - La LibLapin est maintenant d'évaluer les fonctions définies dans les pointeurs:
    gl_bunny_my_clear
    gl_bunny_my_fill
    gl_bunny_my_set_pixel
    gl_bunny_my_set_line
    gl_bunny_my_set_polygon
   Cela, a condition de disposer d'une fonction dans gl_bunny_my_blit capable de
   copier une image dans une autre en respectant le paramètre t_bunny_position* position.

 - Ajout du typedef sur t_bunny_position t_bunny_size.

=========================================================================================
------------------------------------- Version 1.7: --------------------------------------
=========================================================================================

 - Refonte générale des fichiers en tete. Un fichier "lapin/basic.h" contient la base
   de la lib lapin (historiquement, l'equivalent de la 1.0 avec quelques fonctions en moins)
   Les elements autres sont dans lapin/advanced.h

 - Attention, la compatibilité est brisée au niveau du son, mais le fix est rapide. Seul
   un cast additionnel est requis (ou l'envoit de l'adresse de ->sound) depuis un
   t_bunny_effect.

 - Il est maintenant possible de générer un son avec son programme et non seulement
   a partir d'un fichier.

 - Ajout de la gestion du refresh écran via la fonction bunny_set_display_function.
   Cette fonction fournit la garantie de ne pas refresh inutilement. Evidemment, si
   vous utilisez cette fonction: n'affichez plus rien dans la fonction passée à
   bunny_set_loop_main_function !

 - Ajout de la gestion du redimensionnement de la fenetre, du gain et de la perte du focus
   sur une fenetre, ainsi que d'une fonction bunny_get_window permettant de savoir de quel
   fenetre provient un evenement.

 - La fonction bunny_loop_mw vient remplacer bunny_loop dans les programme souhaitant etre
   multi-fenêtre. Celle ci prend effectivement en paramètre un tableau de pointeur sur
   fenetre au lieu d'un unique pointeur.

 - Une fonction bunny_set_maximum_ram permet de définir au demarrage le nombre d'octet
   utilisable via les allocateur de la lib lapin. La fonction interne set_max_heap_size
   va donc disparaitre petit a petit.

 - La fonction bunny_set_memory_check vient remplacer la mise a 1 de la variable memory_check,
   à la base element interne de la bibliothèque. Cette fonction permet donc de definir
   si l'on souhaite un résumé d'erreur mémoire en fin de programme.

 - bunny_malloc est maintenant plus sévère quand à sa politique de dépassement. Un seul
   octet écrit de travers, et ca segfault soit en liberant les ressources soit en
   quittant le programme.

 - Retrait de l'anti-aliasing par défaut au niveau de la fenêtre et retrait de la configuration
   du vsync.

 - Ajout d'une gestion pour les evenements resize, gotfocus et lostfocus. Dans un contexte
   a plusieurs fenetres, l'evenement close est maintenant gerable. Si il n'est pas geré,
   le fonctionnement reste le meme qu'en simple fenetre: on quitte la boucle.

 - Ajout de la fonction bunny_set_geometry qui permet de dessiner a peu près n'importe
   quelle forme. Elle est également capable de texturer les quadrilatères.

 - Retrait de l'interface specifique à C++. La lib reste compatible avec le C++, mais
   il faudra passer par les même fonction qu'en C (c'était vraiment gadget, de toute façon)
   Elle reviendra peut-être plus tard, mais c'est pas dit.

=========================================================================================
------------------------------------- Version 1.6.3: ------------------------------------
=========================================================================================

 - Correction d'un conflit entre clic et déplacement de souris dans la gestion d'events

=========================================================================================
------------------------------------- Version 1.6.2: ------------------------------------
=========================================================================================

 - Ajout de bunny_save_pixelarray, interdite sauf recode, evidemment

 - Correction de bunny_set_mouse_position

 - Correction de bunny_set_mouse_visibility

 - Léger changement dans la gestion du délai dans bunny_loop

 - Correction de bunny_set_context

=========================================================================================
------------------------------------ Version 1.6: ---------------------------------------
=========================================================================================

 - On passe de la version "stable" 2.3.2 de SFML a la derniere version issue du depot
   pour cause d'instabilite avec l'objet sf::String... Merci à boudon_v pour avoir
   eu l'idée de mettre en cause SFML.

 - En cas d'absence de la variable DISPLAY, l'erreur lancée par SFML est rattrapée
   et bunny_start retourne NULL.

 - Fonction bunny_set_mouse_position_window et bunny_set_mouse_position, permettant
   de placer la souris soit par rapport à l'écran soit par rapport à la fenetre.

 - Fonction bunny_set_mouse_visibility.

 - Fonction bunny_request_focus permettant de récuperer le focus (le système peut refuser)

 - L'ancien t_bunny_transform devient t_accurate_position.
   /!\ Risque d'incompatibilité des codes utilisant ces champs si des copies ou casts ont été fait

 - t_bunny_transform est un ensemble de valeur correspondant à une transformation utilisable
   par les mecanique de shaders.

 - Les fonctions de manipulation de shader suivante sont ajoutées:
    bunny_is_shader_available
    bunny_blit_shader
    bunny_new_shader
    bunny_delete_shader
    bunny_load_shader
    bunny_shader_set_variable

  - Correction de bunny_ini_scope_get_field

  - Correction de bunny_blit depuis un picture vers un pixelarray

  - Ajout de bunny_set_key_repeat pour activer/desactiver la repetition des touches.

=========================================================================================
------------------------------------ Version 1.5.1: -------------------------------------
=========================================================================================

 - Les champs t_bunny_window.name et t_bunny_pixelarray.pixels sont désormais constant.
   name est constant et pointe sur des octets constant
   pixels est constant mais ce sur quoi il pointe ne l'est pas

   ainsi, il est impossible de reassigner pixels sans forcer.

=========================================================================================
----------------------------------- Version 1.5: ----------------------------------------
=========================================================================================

 - Ajout des fonctions bunny_set_context et bunny_get_context pour charger et sauvegarder
   un contexte d'evenements.

 - Ajout des fonctions bunny_ini_first, bunny_ini_scopename, bunny_ini_next, bunny_ini_scope_get_field,
   bunny_ini_scope_set_field. Cela pour permettre un parcours dans les scopes des
   fichiers ini.

 - Ajout des fonctions bunny_set_joy_axis_response, bunny_set_joy_button_response,
   bunny_set_hoy_connect_response, bunny_get_joy_button, bunny_get_joy_axis, bunny_set_wheel_response.
   Ces fonctions permettant d'utiliser des manettes de jeux avec la LibLapin. L'enumeration
   t_bunny_axis ajouté pour servir le propos ainsi que la structure t_bunny_joystick

 - Ajout de la fonction bunny_set_wheel_response gerant la molette de la souris

 - Correction de constness ci et la.

 - La boucle principale dort si il y a matière à dormir de manière à limiter
   les demandes de certains systèmes de tuer le programme et économiser du CPU.

 - Modification du fake_install.sh pour faciliter la reinstallation.

 - Le symbole BKS_SUBSTRACT est renommé BKS_SUBTRACT

 - Les symboles CONNECTED et DISCONNECTED valant respectivement GO_DOWN et GO_UP sont
   ajouté dans t_bunny_event_state de manière à disposer de macro sémantiquement
   correcte à l'usage lors de la connection et déconnexion de manette de jeu.

 - Ajout du fichier "font.png" dans le dossier de la bibliothèque, contenant
   une police de caractère basse résolution.

 - Ajout de la globale gl_vecterfont, contenant une police de caractère au format
   vectoriel (utilisable via bunny_set_line)

 - Ajout de champs x_origin, y_origin, x_scale, y_scale et rotation dans clipable
   afin de permettre des redimensionnement et des rotations. Utilisable uniquement
   sur recode, de la même manière que le reste.

 - Le chargeur de INI prend en charge les commentaires avec le symbole '#'.

 - La fonction bunny_blit, du fait d'un bug, ne permettait pas de blitter des picture
   sur des pixelarray, c'est maintenant reglé.

 - Ajout d'un logiciel "joystick_panel" permettant d'essayer des manettes de jeu

 - Nouveau template.c

=========================================================================================
----------------------------------- Version 1.4: ----------------------------------------
=========================================================================================

 - Mise à jour de fake_install.sh.

 - Ajout d'un champ "mod" dans le type t_color.

=========================================================================================
----------------------------------- Version 1.3: ----------------------------------------
=========================================================================================

- Ajout de la fonction bunny_start_style permettant de definir plus finement
le style des fenetres.

- Retrait des entiers non signes dans les tailles des images et autres -> c'est
inutile et handicapant lors des comparaisons

- Mise à jour de la documentation (Ajout d'instructions pour l'installation)

- Mise à jour de fake_install.sh

=========================================================================================
----------------------------------- Version 1.2: ----------------------------------------
=========================================================================================

- Ajout de la macro M_PI afin de respecter la norme des lapins noirs invectivant
l'usage de -ansi -pedantic

- Ajout de bunny_malloc, bunny_free, bunny_calloc et bunny_realloc ainsi
que de fonctions de limitation memoire et de verification de coherence.

- Le flag -DLAPIN_ALLOCATOR_DEACTIVATED permet de supprimer les appels
aux allocateurs de la lib lapin (sauf ceux qui sont compile dans
bunny_new_pixelarray, evidemment) en les remplacant par ceux du systeme

- Le flag -DLAPIN_ALLOCATOR_OVERLOAD permet de supprimer les appels
aux allocateurs du systeme pour ls remplacer par ceux de la lib lapin

- Ajout d'une enumeration pour la gestion des touches.

=========================================================================================
------------------------------------- Version 1.1: --------------------------------------
=========================================================================================

- Ajout de pointeurs sur fonctions initialement vide
permettant d'appeler ses propres fonctions en passant
par les fonctions de dessins predefinies par la lib.

- Correction de bunny_fill dans le cas d'une image
en memoire graphique

- Les composantes de couleurs sont maintenant correctes
et identique en acces manuel ou graphique

- Correction de blit dans le cas d'une image manuelle

- Les images manuelles sont remplies de rose par defaut

- Correction de la directive de liaison dans le fichier
en-tete et details de compilation supplementaires

- Modification des constantes de couleur

=======================================================================================
------------------------------------- Version 1.0: ------------------------------------
=======================================================================================

- Première version.

- La LibLapin est une bibliothèque graphique permettant la programmation au pixel
  sur CPU comme via GPU, disposant d'une boucle de synchro temps avec gestion
  d'événements via fonctions de rappels.

- Les objectifs de la LibLapin sont les suivants:

- - Etre agréable a utiliser (Pas au sens typo, mais dans le sens agréable de
    broder autour)

- - Etre simple, sans ambiguité et manipulable en limitant au maximum les aller
    retour avec la documentation

- - Permettre a l'utilisateur de progresser en C comme en graphisme.


- La principale force de cette bibliothèque réside dans sa gestion d'événements
  direct mais surtout dans sa boucle de synchro temps permettant la réalisation
  de programmes a vitesse fixe sur différentes machines. Cette boucle de synchro
  est auto-réparatrice: elle rattrapage les éventuels retards accumulés.
