liblapin-dev (1.12) UNRELEASED; urgency=low

  * Edit the repository and build system:
    - Switch from a single file errors~ to a directory with errors and
      warnings associated to files.

  * General
    - All functions now set errno on error.
    - All functions now write error logs on stderr if activated, disabled by default.
    - All functions now write logs on stdout, if activated, disabled by default.
    - Remove log printing commanded by the DEBUG macro.
    - Use bunny_alloca instead of directly alloca and bring a bunny_freea for systems
      that does not support alloca.
    - Add a transparent ressource manager working behind most loading functions
      of the library, making copy on write (or copy on call to make_unique), meaning
      now structures of bunny library may only be handler to real data instead
      of being real datas. The purpose of this is to save memory without having you
      to change anything in your code.

  * Edit allocator module
    - Add bunny_allocator_reset to restart completly the allocator and invalidate
      all pointers.

  * Add error module
    - Bring the t_bunny_error type that complete errno error codes.
      **Compatibility break!** as t_bunny_error was used by the network module.
    - Bring associated human readable description.
    - Bring bunny_perror, bunny_strerror, bunny_errno, etc.

  * Edit event module
    - Empty the event stack when leaving bunny_loop or bunny_loop_mw.
    - Add on_entering_context and on_leaving_context response function.
    - Add bunny_get_frequency to get the frequency of the main loop.
    - The t_bunny_display response function now take a non const pointer. **Compatibility break!**
    - Add a minimal movement value to call joystick axis event, to improve
      support of analogic joystick, especially in menus.

  * Edit graphic module
    - Add to bunny_load_picture and bunny_load_pixelarray the ability to load
      configuration file presetting fields of their returned structure.
    - Uncipher picture files when loading them if a loading cipher function is set.

  * Add sprite module
    - Bring an automatically animated picture, configured by script and specific
      orders.

  * Add context module
    - Bring structure to normalize context and allow the design of reusable contexts.
    - Bring the bunny splash screen context

  * Edit placement module
    - Add bunny_real_width and bunny_real_height C11 macro to compute the displayed
      size of window and clipable elements.

  * Edit color module
    - Fix GREY macro to GRAY, same for ALPHA_GREY. Old version are still available in
      compat.h and are deprecated.

  * Add a parsing module, bringing generic parsing tools.

  * Add camera module
    - Bring camera capture.
    - Bring heatracking capability.

  * Add plugin module
    - Bring the ability to load specificaly formated libraries.
    - Bring bunny_call and bunny_callv to call a dynamically resolved symbol and
      prototype. **Add a dependency: libffcall**.
    - Bring the ability to get unformated functions from a library.
    - Bring a t_bunny_value type to transact with modules.

  * Edit sound module
    - Add bunny_sound_set/get_cursor.
    - Move bunny_music_get_cursor into compat.h as a macro, it is deprecated.
    - Add bunny_sound_pause
    - Add sound attriutes like volume, pitch, loop, etc. in t_bunny_sound
    - Edit bunny_sound_play to apply every structure attribute to the sound.
    - Add to bunny_load_music and bunny_load_effect the ability to load configuration
      file presetting fields of their returned structure.

  * Add sound manager module
    - Bring a global manager that allow a video game programmer to centralize its
      sound management.
    - Globalize volume and pitch of all sounds, stored in categories.
    - Prevent multiple unrelated music tracks to be played at the same time.

  * Edit pool module
    - Rename the "array" field to "data" in t_bunny_pool structure. **Compatibility break!**
    - Move bunny_pool_get, bunny_pool_getv and bunny_pool_release in compat.h, it is deprecated.
    - Bring a better way to allocate and free with bunny_pool_new and bunny_pool_free.
    - Remove the need for item id.
    - Rename bunny_pool_size to bunny_pool_capacity, which returns the maximum amount
      of elements inside the pool. bunny_pool_size now returns how many elements
      there is currently. **Compatibility break!**
    - Move bunny_pool_free_elem and bunny_pool_occupied_elem in compat.h, it is deprecated.
    - User data in pool is not constant anymore.
    - Remove the need of using bunny_thread_wait_completion after a fast foreach.
    - Remove the need of sending an index variable to foreach. **Compatibility break!**
    - Remove the const specifier for the additionnal parameter of fast foreach.

  * Edit vector module
    - Add ctor and dtor to build and destroy items when require in t_bunny_vector.
    - Add a third parameter, the ctor parameter, to bunny_vector_resize. **Compatibility break!**
    - Remove the need of using bunny_thread_wait_completion after a fast foreach.
    - Remove the need of sending an index variable to foreach. **Compatibility break!**
    - Remove the const specifier for the additionnal parameter of fast foreach.

  * Edit list module
    - Add ctor and dtor to build and destroy items when require in t_bunny_list.
    - Add a third parameter, the ctor parameter, to bunny_list_tie. **Compatibility break!**
    - Remove the need of using bunny_thread_wait_completion after a fast foreach.
    - Remove the need of sending an index variable to foreach. **Compatibility break!**
    - Remove the const specifier for the additionnal parameter of fast foreach.

  * Edit map module
    - Remove the need of using bunny_thread_wait_completion after a fast foreach.
    - Remove the const specifier for the additionnal parameter of fast foreach.
    - Send the entire node when using foreach insteda of the value only, so the key
      is also available.

  * Edit thread module
    - Remove the const specifier in threa_foreach and thread_push for the additional
      parameter.

  * Edit configuration module
    - Switch from having a "@" node inside bunny_configuration to store field in the
      default scope for INI format to simply act intelligently to recognize those who
      are in the default scope.
    - Edit bunny_configuration_access on string to make it call go_get_node instead of
      get_child and so handle address as parameter.
    - Edit bunny_configuration_go_get_* so they can now use a value from another
      field with the operator [] in addr. For example: node.Field[node.case].
    - Edit INI parser so scopes can now use full address as name instead of simple
      fieldname, breaking the depth limitation of INI.
    - Add CSV support.
    - Add support in DABSIC parser for functions, parameters, variables, loops, ifs,
      etc. Making it a real programming language. Support for hashmap and arrays.
      Reference are currently supported but *cannot be written*.
    - Extend PATH when using @insert and @include.
    - Add functions to manually extend or shrink path (push_path, pop_path).
    - Add DABSIC Sequence support.
    - Add LUA data structure support.
    - Add JSON support.
    - Add XML support.
    - Add LISP syntax support.

  * Edit network module
    - Rename t_bunny_error to t_bunny_network_error. **Compatibility break!**
    - Add BCT_ as prefix before t_bunny_comtype symbols. **Compatibility break!**
    - Add BCE_ as prefix before t_bunny_comerror symbols. **Compatibility break!**
    - Rename LAST_ERROR to LAST_NETWORK_ERROR. **Compatibility break!** as LAST_ERROR
      is now used by the error module.

  * Add unix module
    - bunny_popen and bunny_pclose allow complex bidirectionnal communication between
      two process.

  * Add monitor module
    - Bring a system in which register memory space to print or draw them later.

  * Add asynclock module
    - This module allow the user to register function call request for a specific
      time or pace.

  * Edit shader module
    - Bring automatically generated normal map shader with custom amount of lights.

  * Edit collision module
    - Bring dot-dot collision.
    - Bring rectangle-dot collision.
    - Bring quad-dot collision.
    - Bring rectangle-rectangle collision.
    - Bring triangle-dot collision.
    - Bring triangle-circle collision.
    - Bring circle-circle collision.
    - Bring circle-dot collision.
    - Bring equation-dot collision.
    - Bring equation-equation collision.
    - Bring quad-equation collision.
    - Bring quad-quad collision.
    - Bring rectangle-equation collision.
    - Bring triangle-equation collision.
    - Bring triangle-quad collision.
    - Bring triangle-rectangle collision.
    - Bring triangle-triangle collision.
    - Bring circle-equation collision.
    - Bring circle-quad collision.
    - Bring circle-rectangle collision.
    - Bring circle-line collision.

  * Edit misc module
    - Add support for base64.
    - Use the environment parameter in bunny_evaluate.

 -- Jason Brillante <damdoshi@hotmail.com>  Tue, 12 March 2018 12:00:00 +0100

liblapin-dev (1.11) stable; urgency=low

  * Add a text module that can handle png font and real font and act as textbox.
    Based on clipable.
  * Add a configuration module that can load and save in different formats and
    handle all the same way
  * Handle INI format
  * Handle DABSIC format
  * Add bunny_read_ini and bunny_write_ini to read and write from and to memory instead of file
  * Add bunny_ini_count_field
  * Deprecate bunny_ini module, use bunny_configuration instead now
  * Add network related events
  * Down the screen resfresh rate if the main loop is too slow.
  * Reorganize privates header.
  * Add bunny_get_fullscreen_modes

  * Add a security module to cipher configuration file, assets and saved games.
    **Only for low security needs*
  * Add a hash module
  * Add a bunny_load_file and bunny_save_file
  * Add bunny_thread_push to push a single task into a bunny threadpool
  * Add a stack, queue, list, vector, map, bitfield module
  * Add a pool module for fast memory alloc and free
  * Add a stack on stack module (Container that act as stack, with all its alloc on the real stack)
  * Add bunny_evaluate to compute mathematic operations. Supported operators
    are +-*/%<><=>= == != () and ?:. Currently, variable environment is ignored.
  * Add a collision module that includes triangle collision
  * Add a bunny_unix module
  * Add ANTIALIASING flag for window style
  * Edit LAPIN_ALLOCATOR_DEACTIVATED so it can be used while compiling the library
  * Add BUNNY_ALLOCATOR_* as alias of LAPIN_ALLOCATOR_* macros

  * Add the geosquare demo.

 -- Jason Brillante <damdoshi@hotmail.com>  Tue, 23 May 2017 12:00:00 +0100

liblapin-dev (1.10) stable; urgency=low

  * Remove basic.h, advanced.h and extra.h to organize functions around modules instead.
  * Fully documented with Doxygen.
  * New Makefile
  * Simple project template

 -- Jason Brillante <damdoshi@hotmail.com>  Wed, 10 Aug 2016 00:00:00 +0100

liblapin-dev (1.9) stable; urgency=low

  * Add lapin/extra.h and lapin/extra_type.h
  * Add bunny_server_ and bunny_client_ for network programming
  * Add bunny_thread for parrallel programming
  * Add bunny_hardware, driver for PVM110N by Velleman. (Activate with BUNNY_HARDWARE, need libusb)
  * Add bunny_move_window and bunny_resize_window
  * Add bunny_get_screen_resolution
  * Add bunny_strnlen (Windows missing function)

  * Check the malloc return value in bunny allocator

  * Add a demo script for shader, window resize, network, thread and hardware
  * Codeblock project for Windows

 -- Jason Brillante <damdoshi@hotmail.com>  Thu, 19 Jul 2016 00:00:00 +0100

liblapin-dev (1.8) stable; urgency=low

  * Add DEFAULT_SCOPE symbolic constant
  * Add a color field in clipable for color masking
  * Edit the pixelarray functions to make it works without any graphic environment
  * Edit the bunny allocator to make it scream on stderr instead of stdout
  * Add bunny_set_circle
  * Add bunny_ini_first_scope, bunny_ini_next_scope, bunny_ini_first_field, bunny_field_set_value,
    bunny_ini_get_scope, bunny_ini_field_name, bunny_ini_next_field, bunny_field_get_value.
  * Add bunny_self_test to evaluate pixelarray drawing functions set to gl_buny_my_* function pointer.

  * Fix bunny_save_pixelarray
  * Fix the segmentation fault in the INI error handling. (Discovered by users)

 -- Jason Brillante <damdoshi@hotmail.com>  Tue, 14 Jun 2016 00:00:00 +0100

liblapin-dev (1.7) stable; urgency=low

  * Split lapin.h into lapin/basic.h and lapin/advanced.h
  * Define t_bunny_sound and t_bunny_effect as real structure instead of void pointer.
    **Compatibility break!**
  * Add a way to generate sound with your program
  * Add a callback for screen rendering.
  * Add a callback for the window resize event.
  * Add a callback for get and lost focus events.
  * Add a callback for window close event for multiple window mode.
  * Add bunny_set_maximum_ram to set the maximum amount of bytes the bunny allocator can give.
  * Edit the bunny allocator to make it more aggressive with buffer overflows
  * Add bunny_set_geometry

  * Remove the anti aliasing
  * Remove vsync
  * Remove C++ wrapper: C symbols are reachable anyway.

 -- Jason Brillante <damdoshi@hotmail.com> Mon, 21 Mar 2016 00:00:00 +0100

liblapin-dev (1.6) stable; urgency=high

  * Add bunny_set_mouse_position_window, set_mouse_position to move the mouse on window or screen
  * Add bunny_set_mouse_visibility to hide or display the cursor.
  * Add bunny_request_focus
  * Rename t_bunny_transform into t_bunny_accurate_position. **Compatibility break!**
  * Add a t_bunny_transform structure that contains transformation information for shaders
  * Add bunny_is_shader_available, new_shader, delete_shader, load_shader, shader_set_variable
    to create shaders and bunny_blit_shader to blit a picture using a shader.
  * Add bunny_set_key_repeat to activate or deactivate key repetition.
  * Add bunny_save_pixelarray to save a cpu picture into a file

  * Fix bunny_ini_scope_get_field
  * Fix bunny_blit from gpu to cpu (again)
  * Fix the conflit between clic and mouse move event that turn into invalid values in callbacks.

 -- Jason Brillante <damdoshi@hotmail.com>  Fri, 27 Nov 2015 00:00:00 +0100

liblapin-dev (1.5.1) stable; urgency=high

  * Constify t_bunny_window.name and its characters
  * Constify t_bunny_pixelarray.pixels but not its pixels

 -- Jason Brillante <damdoshi@hotmail.com>  Tue, 3 Nov 2015 00:00:00 +0100

liblapin-dev (1.5) stable; urgency=medium

  * Add bunny_set/get_context to load and save all callbacks in one shot.
  * Add bunny_ini_first, ini_scope_name, ini_next, ini_scope_get_field and ini_scope_set_field
    functions to allow to browse scopes inside a INI file without having to know them before.
  * Add bunny_set_joy_axis_response, joy_button_response, joy_connect_response, get_joy_button,
    get_joy_axis functions. Those functions handle joysticks events. Associated enums and structures were added.
  * Add bunny_set_wheel_response for mouse wheel
  * Add CONNECTED and DISCONNECTED in the event_state enum.
  * Add gl_vector font and associated types.
  * Add origin and scale modifier in the clipable structure
  * Handle commentaries with '#' at the beginning of a line in INI file

  * Add several const
  * Make the main loop sleeps instead of spamming time
  * Fix the typo in BKS_SUBSTRACT
  * Fix bunny_blit from gpu to cpu

  * Add a font.png file
  * Add the joystick_panel program that is useful to test your joystick

 -- Jason Brillante <damdoshi@hotmail.com>  Mon, 2 Nov 2015 00:00:00 +0100

liblapin-dev (1.4) stable; urgency=low

  * Add a mod attribute in the t_color union to create color offsets.

 -- Jason Brillante <damdoshi@hotmail.com>  Mon, 2 Nov 2015 00:00:00 +0100

liblapin-dev (1.3) stable; urgency=low

  * Add bunny_start_style that allow to define a window style.
  * Use int instead of unsigned int everywhere

 -- Jason Brillante <damdoshi@hotmail.com>  Thu, 23 Sep 2015 00:00:00 +0100

liblapin-dev (1.2) stable; urgency=low

  * Bring bunny_malloc, a custom allocator to limit and monitor allocations
  * Add an enumeration for keyboard keys

 -- Jason Brillante <damdoshi@hotmail.com>  Mon, 21 Sep 2015 00:00:00 +0100

liblapin-dev (1.1) stable; urgency=low

  * Add functions pointers gl_bunny_my_* that makes drawing functions handle cpu pictures.
  * Set pink as default color for new pictures
  * Fix bunny_fill on gpu pictures
  * Fix color constant to have the same colors on cpu and gpu pictures
  * Fix bunny_blit from cpu to gpu

 -- Jason Brillante <damdoshi@hotmail.com>  Tue, 17 Jun 2015 00:00:00 +0100

liblapin-dev (1.0) stable; urgency=low

  * First version of the "Bunny Library"
  * Brings pixel-per-pixel throught CPU
  * Brings block-per-block throught GPU
  * Brings ways to mix both
  * Brings a time locked loop with event callbacks.

  * Objectives are:
  * Simplicity: tools must be direct and quick to work with.
  * Explicity: avoid the need to read the doc for each function
  * Pedagogic: beginners must be able to progress in graphics, but also in C programming

 -- Jason Brillante <damdoshi@hotmail.com>  Sun, 01 Mar 2015 00:00:00 +0100

