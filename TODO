Les erreurs dans LibLapin2 doivent etre indenté en fonction de leur profondeur.
Comme ca, on peut retourner les erreurs et les avoir dans l'ordre, genre
-Cannot generate ressourceX
--Cannot parse gnagnagna
---Syntax error on line 3 because xxxx


En Dabsic, le mot clef qui sert a renvoyer une erreur peut servir soit à throw soit à revenir
dans la fonction parente en fonction de la façon dont il a été appelé. En effet, un specificateur
d'appel permet de demander a la fonction en dessous de faire l'un ou l'autre. Il existe egalement
un mot clef servant a transmettre le specificateur de la fonction courante...!
CA, ca serait cool = )


Ajouter la possibilite de mettre des SONS dans bunny sprite.


En INI comme dans DABSIC TREE, si des strings litterales sont cote a cote, les concatener.


Specificateur "pure" permettant de signaler qu'une fonction depend a 100% de ses paramètres
et que donc son resultat peut etre mis en cache avec comme clef ses paramètres. => Le mot clef pure
va donc interdire d'utiliser le scope artificiel ou le scope global.

Nouveau type "address" basé sur string, permettant de specifier plus precisement les
paramètres fait pour etre manipulé comme des addresses avec l'operateur [de deref].
Ou alors, tout simplement, l'opérateur & retourne l'adresse de l'element... et ne peut donc
evidemment pas être utilisé sur les variables automatiques.

Permettre d'executer une sequence de facon aussi transparente qu'une fonction.
(modifier configuration_execute/dabsic_compute)


Un programme de verification syntaxique pour bunny_configuration.

Bring specifier in INI?

=> t_bunny_sound_sprite async crachera certainement si on fait un arret manuel a cause
du conflit avec le thread de gestion...

=> programmer const, eternal et solid.

tests/dabsic/array.dab ne passe plus a cause du changement de politique de regeneration visant a conserver la forme
array=1,2,3,4 au detriment de {array 1, 2, 3, 4} pour les petits tableaux.

Lors d'une coloration syntaxique de fonction... Donner une couleur unique (ou presque) a CHAQUE variable
et colorier TOUJOURS ces variables de la meme facon a l'interieur de ces fonctions.
Les champs exterieurs peuvent etre coloriée de facon arbitraire aussi... Il faut voir.
Le plus simple sera probablement de hasher le symbole et de faire correspondre le resultat a une table de
couleur pré établie.
==> Un pretty printer, ca seriat très chouette pour Dabsic...


Les indirections sont deja gerée en Dabsic par [field] => Si field contient une raw string correspondant a un
champ, ca marche. Le probleme c'est qu'on ne peut pas assigner un champ, seulement son contenu.
Pour cela, il faut faire l'operateur uniaire '&'.

Dans le script Dabsic, un moyen de créer des noeuds. (actuellement, ca crache une erreur "cannot get address X")

Ajouter un warning type "Missing return in function X".

Objet de GUI point, cercle, ligne, triangle, carré, forme libre, etc. avec une collision
réelle et non carrée.

Quand on recupere une information dans un arbre dont le noeud est une expression...
executer l'expression au lieu de rien faire comme une merde.

Dans tests/script, il y a env.dab qui fait "DynamicValue + X" et DynamicValue
n'est pas defini au parsing... il faut donc conserver l'expression DynamicValue
jusqu'à l'execution, sinon ca ne peut pas le faire avec GUI...
car on compose la GUI au fur et a mesure et il peut y avoir des intrications
interessante si on attend l'execution pour resoudre les symboles.

=> Autoriser l'écriture de type:
Clip.Size=20,20
Pour eviter de se farcir tout ca:
[Clip
  Size=20,20
]

=> Un contexte (devant pouvoir s'utiliser comme sous contexte), peut etre basé sur le contexte de GUI
   offrant une boite de dialogue permettant de chercher un fichier sur le systeme.

=> Dans Tilemap, associer une tilemap moins dense contenant une liste des elements
situés dans la zone.

=> Dabsic, enumeration hierarchisé, exemple... un "dressed sprite" est un sprite.
donc si on teste que "dressed sprite" vaut sprite, c'est vrai. En somme, l'enum hierarchisé
implique un second niveau de verification (ou plus) et permet de generer des categories

=> Un mode debug de la LibLapin ou la moindre erreur assert (une erreur de type syntaxe ou allocation) ?

Dans le gestionnaire de ressource, créer un "prepare to record" qui pre enregistre
les valeurs (ou garde dans un coin lesquelles ont été ajoutées) et un "record"
qui enregistre pour de vrai. l'idée étant de "cancel" en cas d'erreur.

Lecteur de midi avec fluidsynth (sf::midi?)
Lecteur de video avec libtheoraplayer (sf::theora?)
Lecteur de mod avec ? (sf::mod?)

En Dabsic, une comparaison avec des elements séparés par des virules signifie de tester avec chaque element de la liste?
Ca pourrait etre sympa, meme si cela implique de deplacer la priorité de la virgule depuis
le haut jusqu'au litteral... ce qui serait pas plus mal.
Exemple:

  a < b, c, d
  a == b, c, d
  a, b >= c, d    veut dire a >= c && a >= d && b >= c && b >= d
  ... donc changer le fonctionnement de "," pour passer de simple separateur
  d'opération a generateur de paquet ayant pour objet d'être développé avec
  les opérateurs concernés


Ajouter la repetition des sprites situés sur un tileset bouclant
=> Pour ca, il faudrait localiser dans des ensembles de case les tuiles positionnés.


Un systeme de conversion configuration->struct a partir d'un descriptif facon
printf. il resoud les offset tout seul ou prend ne paramètre les addresse des champs

 Ajouter la doc de tilemap dans le site web et dans formats/

 Ajouter les informations d'erreur dans sprite/tilemap/dressing en
 cas d'erreur de chargement de fichier (le minimum quoi...)

=> dress up context

Fonction "make it fit" pour scaler un clipable pour qu'il occupe 100% d'un buffer.
Des fonctions similiares prenant des % en parametre pour prendre un pourcentage de la taille.
Ou juste une seul... celle avec le parametre

@insert/@include de dossier entier par ordre alphabetique mais cette fois,
avec une option pour le faire *recursivement*
@insert/@include avec precision des champs a integrer... soit en mode "keep hierarchy"
soit en mode "bring it here".
@insert/@include aavec precision des champs a *exclure*, et ajouter un mot clef pour
preciser que les champs exclu sont les champs locaux pour @insert.


Faire un module pour faire des IA de jeux... capable de faire des analyses à la première personne.
=> Que faire? J'ai du mal a comprendre comment une lib pourrait aider ce qui ressemble
beaucoup a une fonction.
Ou alors il s'agirait d'une facon de relier le jeu a de la conf.



Operateur ->= permettant de faire
root ->= lol ====> root = root->lol


=> Pouvoir effectuer un cast en ecrivant une variable au lieu d'un type, un peu comme sizeof(*var) fonctionne au lieu de sizeof(int)
de facon a permettre de dire "cast dans le meme type que telle variable"

Generaliser la fonction "is_last" permettant de savoir si l'element actuel est le dernier.
Il faudrait aussi faire un "is_first" dans le cas ou on parcoure a l'envers une configuration ou un conteneur.

Un "begin" et "end" pour bunny map.


Créer un "begin/end" generique a tous les conteneurs utilisant les macros generique.




Dans le contexte "Adventure"... Les lignes de texte choisies doivent changer de couleur
si elles ont deja été dite.

Dans le contexte "Depth"... de la pluie! = )
