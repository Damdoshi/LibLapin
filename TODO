---------------------
Fonctionnalité Lapin:

 - Passer a la SFML 2.4.0

 - bunny_strerror et bunny_perror font leur apparition. bunny_errno est un alias vers errno.

 => Peut etre briser la compatibilité INI en vue de faire ceci:
   => Créer un objet "configuration" contenant des informations et dont trois dérivés existerait:
     => hierarchical (Pouvant provenir de INI, Dabsic, JSON, XML), avec une compatibilité de l'API INI vers hierarchical
     => Client SQL complet
     => hierarchical avec back end SQL (et des tables precises...) pour faire une BDD hierarchique

- Passer de pthread à std::thread pour pouvoir threader sous Windows facilement

- Ajouter un paramètre à bunny_malloc afin de placer un fichier et une ligne
  et permettre de tracer l'alloc. Ajouter une allocation par vague... Placer une
  macro d'abstraction pour placer les informations automatiquement.

- Ajouter, lorsque bunny_malloc ne trouve pas de blocs en mémoire, casser
  un gros bloc en plusieurs morceaux.

- Une fonction pour lancer une unique tache dans un thread.

- Une fonction pour charger tout un fichier d'un coup, depuis l'ordinateur
ou depuis l'internet.

- Module bunny security

- Module SQL

- Mettre une option a bunny_malloc pour appeller malloc.

- Créer un systeme d'ordre avec duree de vie

- Inclure le resolveur d'operations dans la LibLapin, prenant en paramètre
  l'environnement de valeurs - Un bind vers hbs::Operation en gros

- Ajouter un micro gestionnaire de pluging compatible avec un format de fonction
  situe en configuration.

- Dans plugin... ajouter des fonctions type "bunny_complete_me" permettant de charger des fichiers .so
  et d'assigner les pointeurs gl_bunny_my automatiquement

- Retirer la couche d'abstraction unix windows qui est completment naze et juste s'en passer...
  aux dernieres nouvelles, Windows est POSIX...

- Ranger encore les exemples... Créer un dossier "misc" ou un truc comme ca ou mettre le bordel
  d'avant (sauf les demos) et ecrire des exemples reelement typique de l'utilisation de chaque module.

- Module de saut inter fonction basé sur longjmp ?

- Faire un petit module de parsing en surchargeant hbs::Parsing

- Faire un bind avec le moniteur memoire que tu vas ajouter dans HBSL

- Plutot que get/lost focus, faire un focus tout court qui prend un t_bunny_event_state

-----------------------------
Deployement code block Lapin:

- Projet code block de construction de la LibLapin pour la dernière version, mettant à jour le:
- Projet code block typique pour la LibLapin

------------------------------
Deployement pseudo Unix Lapin:

- Script d'installation .bat créeant une archi de compilation Unix like sous Windows
- Systeme de compilation Lapin (BunnyMakefile, au format INI, Dabsic JSON ou XML, vu que tout sera ramené a la meme API etc.)

-----------------------
Deployement Unix Lapin:

- Créer un package debian pour l'installation de la liblapin via apt-get
  avec resolution des dependances automatiquement


-----------------------
Pour beaucoup plus tard

- Module CGI Lapin pour faire des sites webs en LibLapin,
  avec une petite lib JS pour s'occuper de la transaction via AJAX.

- Pour realiser cela, il faudra ajouter a bunny_loop la gestion d'evenements
  de type "communication" permettant d'inserer la lecture sur pipe ou
  sur le reseau... et egalement la possibilite d'ajouter des evenements de
  type clavier ou autre manuellement
