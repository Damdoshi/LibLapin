---------------------
Fonctionnalité Lapin:

 - ----------------------------------
 - Ajout du module "Bunny Asynclock":
 
 - - Ajout des fonctions bunny_new_trap, bunny_delete_trap, bunny_reset_clock,
     bunny_get_current_time et surtout bunny_asynclock permettant de placer des
     demandes d'appels de fonction dans un style proche de cron et que celle
     ci soient appellée en fonction de paramètres temporels


 - Les fonctions suivantes:
    t_bunny_configuration *bunny_configuration_get_node(config, const char *str);
    avec str du style "node.zoubida[42].genial"

- Permettre a bunny_load_file et bunny_save_file de fonctionner avec des URLs

 - Systeme d'archivage de fichier facon pseudo ar.

 - Passer de setParameter a setUniform pour les shaders

 - Implementer l'utilisation de l'environnement pour bunny_evaluate

 - ---------------------------------------------------------------
 - [bunny_strerror et bunny_perror uniformise la gestion d'erreur]
 - - [/!\ Les fonctions de la LibLapin rétablissent errno à 0 en cas de succès !]

- Ajouter des fonctions inline dans cpp_tools pour permettre aux fonctions de la liblapin
  d'etre prototypairement plus souple... genre une fonction prenant deux int, x et y devra
  aussi pouvoir prendre un t_bunny_position/t_bunny_accurate_position. etc.

- Ajouter un paramètre à bunny_malloc afin de placer un fichier et une ligne
  et permettre de tracer l'alloc. Ajouter une allocation par vague... Placer une
  macro d'abstraction pour placer les informations automatiquement.

- Ajouter, lorsque bunny_malloc ne trouve pas de blocs en mémoire, casser
  un gros bloc en plusieurs morceaux.

- Une fonction pour lancer une unique tache dans un thread.

- Module SQL

- Créer un systeme d'ordre avec duree de vie

- Ajouter un micro gestionnaire de pluging compatible avec un format de fonction
  situe en configuration.

- Dans plugin... ajouter des fonctions type "bunny_complete_me" permettant de charger des fichiers .so
  et d'assigner les pointeurs gl_bunny_my automatiquement

- Retirer la couche d'abstraction unix windows qui est completment naze et juste s'en passer...
  aux dernieres nouvelles, Windows est POSIX...

- Module de saut inter fonction basé sur longjmp ?

- Faire un bind avec le moniteur memoire que tu vas ajouter dans HBSL

- Plutot que get/lost focus, faire un focus tout court qui prend un t_bunny_event_state

- t_bunny_zbuffer est une image avec une dimension en plus (faite de float) permettant
  la gestion de la profondeur. Ce type est un dérivé de t_bunny_pixelarray ?

- Que bunny_loop saute volontairement la phase de dessin (l'appel a bunny_display) si
  la vitesse de la boucle principale est limite.

-----------------------------
Deployement code block Lapin:

- Projet code block de construction de la LibLapin pour la dernière version, mettant à jour le:
- Projet code block typique pour la LibLapin

------------------------------
Deployement pseudo Unix Lapin:

- Script d'installation .bat créeant une archi de compilation Unix like sous Windows
- Systeme de compilation Lapin (BunnyMakefile, au format INI, Dabsic JSON ou XML, vu que tout sera ramené a la meme API etc.)

-----------------------
Deployement Unix Lapin:

- Créer un package debian pour l'installation de la liblapin via apt-get
  avec resolution des dependances automatiquement


-----------------------
Pour beaucoup plus tard

- Module CGI Lapin pour faire des sites webs en LibLapin,
  avec une petite lib JS pour s'occuper de la transaction via AJAX.

- Pour realiser cela, il faudra ajouter a bunny_loop la gestion d'evenements
  de type "communication" permettant d'inserer la lecture sur pipe ou
  sur le reseau... et egalement la possibilite d'ajouter des evenements de
  type clavier ou autre manuellement
